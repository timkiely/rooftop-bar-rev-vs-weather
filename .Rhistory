Earnings ~  Max_TemperatureF + Mean_TemperatureF + Min_TemperatureF +
Max_Dew_PointF + MeanDew_PointF + Min_DewpointF + Max_Humidity +
Mean_Humidity + Min_Humidity + Max_Sea_Level_PressureIn +
Mean_Sea_Level_PressureIn + Min_Sea_Level_PressureIn + Max_VisibilityMiles +
Mean_VisibilityMiles + Min_VisibilityMiles + Max_Wind_SpeedMPH +
Mean_Wind_SpeedMPH + Max_Gust_SpeedMPH + PrecipitationIn +
CloudCover + Events + WindDirDegrees + Date + Earnings +
Day + Day_lab + Month + Year.y + Special + Year + Happy_Hour +
Special_ind + Rain_ind
)
full_lm <- lm(formula = full_model, data = rev_ts_model)
summary(full_lm)
# trail 1. Full model  --------------------------------------------------------
f1 <- as.formula(
Earnings~
Mean_TemperatureF+
#poly(Mean_TemperatureF,2)+
#I(Mean_TemperatureF^2)+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover
#Special
#Events+
#WindDirDegrees
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
f1_glm <- glm(formula = f1, data = rev_ts_model)
summary(f1_glm)
# trial 2. temp & precipitation -----------------------------------------------
f2 <- as.formula(
Earnings~
Mean_TemperatureF+
Max_TemperatureF+
Min_TemperatureF+
PrecipitationIn+
CloudCover+
Rain_ind
)
f2_lm <- lm(formula = f2
, data =rev_ts_model
)
summary(f2_lm)
f2_glm <- glm(formula = f2
, data =rev_ts_model
)
summary(f2_glm)
# tial 3 log earnings --------------------------------------------------------
f3 <- as.formula(
log(Earnings)~
Mean_TemperatureF+
PrecipitationIn+
CloudCover+
Special+
Rain_ind
)
f3_lm <- lm(formula = f3
, data =rev_ts_model
)
summary(f3_lm)
f2_glm <- glm(formula = f2
, data =rev_ts_model
)
summary(f2_glm)
# modeling temp -----------------------------------------------------------
f4 <- as.formula(Earnings ~ Mean_TemperatureF)
f4_lm <- lm(formula = f4
, data = rev_ts_model %>% filter(Earnings<4000)
)
summary(f4_lm)
# effect of rain on response ----------------------------------------------
f5 <- as.formula(Earnings ~ PrecipitationIn + Rain_ind)
f5_lm <- lm(formula = f5
, data = rev_ts_model %>% filter(Earnings<4000)
)
summary(f5_lm)
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = ifelse(PrecipitationIn>0.5,TRUE,FALSE)
, Rain_ind = ifelse(is.na(Rain_ind),FALSE,Rain_ind)
, Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings))
rev_ts_model_ex_specials <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = ifelse(PrecipitationIn>0.5,TRUE,FALSE)
, Rain_ind = ifelse(is.na(Rain_ind),FALSE,Rain_ind)
, Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings)) %>%
filter(Special_ind==FALSE)
# generate formula text  ------------------------------------------------------
## use this to generate formula text in the console:
# as.formula(c("Earnings~",paste0(names(rev_ts_model)[names(rev_ts_model)!="Earnings"], collapse = "+")))
full_model <- as.formula(
Earnings ~  Max_TemperatureF + Mean_TemperatureF + Min_TemperatureF +
Max_Dew_PointF + MeanDew_PointF + Min_DewpointF + Max_Humidity +
Mean_Humidity + Min_Humidity + Max_Sea_Level_PressureIn +
Mean_Sea_Level_PressureIn + Min_Sea_Level_PressureIn + Max_VisibilityMiles +
Mean_VisibilityMiles + Min_VisibilityMiles + Max_Wind_SpeedMPH +
Mean_Wind_SpeedMPH + Max_Gust_SpeedMPH + PrecipitationIn +
CloudCover + Events + WindDirDegrees + Date + Earnings +
Day + Day_lab + Month + Year.y + Special + Year + Happy_Hour +
Special_ind + Rain_ind
)
full_lm <- lm(formula = full_model, data = rev_ts_model)
summary(full_lm)
# trail 1. Full model  --------------------------------------------------------
f1 <- as.formula(
Earnings~
Mean_TemperatureF+
#poly(Mean_TemperatureF,2)+
#I(Mean_TemperatureF^2)+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover
#Special
#Events+
#WindDirDegrees
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
f1_glm <- glm(formula = f1, data = rev_ts_model)
summary(f1_glm)
# trial 2. temp & precipitation -----------------------------------------------
f2 <- as.formula(
Earnings~
Mean_TemperatureF+
Max_TemperatureF+
Min_TemperatureF+
PrecipitationIn+
CloudCover+
Rain_ind
)
f2_lm <- lm(formula = f2
, data =rev_ts_model
)
summary(f2_lm)
f2_glm <- glm(formula = f2
, data =rev_ts_model
)
summary(f2_glm)
# tial 3 log earnings --------------------------------------------------------
f3 <- as.formula(
log(Earnings)~
Mean_TemperatureF+
PrecipitationIn+
CloudCover+
Special+
Rain_ind
)
f3_lm <- lm(formula = f3
, data =rev_ts_model
)
summary(f3_lm)
f2_glm <- glm(formula = f2
, data =rev_ts_model
)
summary(f2_glm)
# modeling temp -----------------------------------------------------------
f4 <- as.formula(Earnings ~ Mean_TemperatureF)
f4_lm <- lm(formula = f4
, data = rev_ts_model %>% filter(Earnings<4000)
)
summary(f4_lm)
# effect of rain on response ----------------------------------------------
f5 <- as.formula(Earnings ~ PrecipitationIn + Rain_ind)
f5_lm <- lm(formula = f5
, data = rev_ts_model
)
summary(f5_lm)
f5 <- as.formula(Earnings ~ PrecipitationIn)
f5_lm <- lm(formula = f5
, data = rev_ts_model
)
summary(f5_lm)
plotly::ggplotly(rev_ts_model %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Rain_ind)) + geom_smooth(method="lm"))
rev_ts
plotly::ggplotly(rev_ts %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Rain_ind)) + geom_smooth(method="lm"))
rm(list=ls())
library(tidyverse)
library(ggrepel)
library(plotly)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts <-
rev_ts %>%
mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = ifelse(PrecipitationIn>0.5,TRUE,FALSE)
, Rain_ind = ifelse(is.na(Rain_ind),FALSE,Rain_ind)
, Events = factor(Events))
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = grepl("Rain",Events)
, Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings))
# specials with labels --------------------------------------------------------
rev_ts_model %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF) +
geom_point() +
geom_smooth() +
ggrepel::geom_text_repel(aes(label=Special), size = 2)
# rain indicator ----------------------------------------------------------
plotly::ggplotly(rev_ts %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Rain_ind)) + geom_smooth(method="lm"))
rev_ts %>%
group_by(Year,Rain_ind) %>%
summarise(Av_Rev = mean(Earnings, na.rm=T)
,min(Earnings,na.rm=T),max(Earnings,na.rm=T))
rm(list=ls())
library(tidyverse)
library(ggrepel)
library(plotly)
rev_ts <- readRDS("weather-revenue-data.rds")
rev_ts <-
rev_ts %>%
mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = ifelse(PrecipitationIn>0.5,TRUE,FALSE)
, Rain_ind = ifelse(is.na(Rain_ind),FALSE,Rain_ind)
, Events = factor(Events))
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = grepl("Rain",Events)
, Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings))
# specials with labels --------------------------------------------------------
rev_ts_model %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF) +
geom_point() +
geom_smooth() +
ggrepel::geom_text_repel(aes(label=Special), size = 2)
# rain indicator ----------------------------------------------------------
plotly::ggplotly(rev_ts %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Rain_ind)) + geom_smooth(method="lm"))
rev_ts <- readRDS("weather-revenue-data.rds")
rev_ts
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts2 <- readRDS("weather-revenue-data.rds")
rev_ts
one <- rev_ts %>% select(Date,Mean_TemperatureF)
rev_ts2
two <- rev_ts2 %>% select(Date,`Temperature Avg`)
three <- left_join(one,two)
three <- left_join(one,two, by = "Date")
three
three <- three %>% mutate(resid = abs(Mean_TemperatureF -`Temperature Avg` ))
three
three$resid %>% hist
three$resid %>% summary
three <- left_join(one,two, by = "Date")
three <- three %>% mutate(resid = Mean_TemperatureF -`Temperature Avg` )
three$resid %>% summary
three$resid %>% hist
three$resid %>% plot()
three %>% arrange(-resid)
three %>%
ggplot()+
aes(x = Date)+
geom_line(aes(y=Mean_TemperatureF), color = "blue")+
geom_line(aes(y=`Temperature Avg`), color = "red")
three
ature Avg`), color = "red")
three %>%
gather(Var,Value,-Date)
three %>%
gather(Var,Value,-Date)
three %>%
gather(Var,Value,-Date) %>%
ggplot()+
aes(x = Date, y = Value, color = Var)+
geom_line()+
facet_wrap(~Var, scales = "free_y")
three %>%
gather(Var,Value,-Date) %>%
ggplot()+
aes(x = Date, y = Value, color = Var)+
geom_line()+
facet_wrap(~Var, scales = "free_y", ncol=1)
three %>%
gather(Var,Value,-Date)
source('~/Dropbox (hodgeswardelliott)/hodgeswardelliott Team Folder/Teams/Data/Tim_Kiely/Weather vs Revenue/R/03-weather-revenue-EDA.R', echo=TRUE)
three %>%
gather(Var,Value,-Date) %>%
mutate(VarGroup = ifelse(Var%in%c("Mean_TemperatureF",`Temperature Avg`),"Temp","Resid"))
three %>%
gather(Var,Value,-Date) %>%
mutate(VarGroup = ifelse(Var%in%c("Mean_TemperatureF","`Temperature Avg`"),"Temp","Resid"))
three %>%
gather(Var,Value,-Date) %>%
mutate(VarGroup = ifelse(Var%in%c("Mean_TemperatureF","`Temperature Avg`"),"Temp","Resid")) %>%
ggplot()+
aes(x = Date, y = Value, color = Var)+
geom_line()+
facet_wrap(~VarGroup, scales = "free_y", ncol=1)
three %>%
gather(Var,Value,-Date) %>%
mutate(VarGroup = ifelse(!Var=="resid","Temp","Resid")) %>%
ggplot()+
aes(x = Date, y = Value, color = Var)+
geom_line()+
facet_wrap(~VarGroup, scales = "free_y", ncol=1)
three %>%
gather(Var,Value,-Date) %>%
mutate(VarGroup = ifelse(!Var=="resid","Temp","Resid")) %>%
ggplot()+
aes(x = Date, y = Value, color = Var)+
geom_line()+
geom_hline(yintercept = 0, color = "white")+
facet_wrap(~VarGroup, scales = "free_y", ncol=1)
three$resid %>% hist
abs(three$resid) %>% hist
ggplot() + aes(x = log(Earnings), y = Mean_TemperatureF) +
geom_point() + geom_smooth()
rm(list=ls())
library(tidyverse)
library(ggrepel)
library(plotly)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts <-
rev_ts %>%
mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = ifelse(PrecipitationIn>0.5,TRUE,FALSE)
, Rain_ind = ifelse(is.na(Rain_ind),FALSE,Rain_ind)
, Events = factor(Events))
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
, Special_ind = ifelse(is.na(Special),FALSE,TRUE)
, Rain_ind = grepl("Rain",Events)
, Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings))
# specials with labels --------------------------------------------------------
rev_ts_model %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF) +
geom_point() +
geom_smooth() +
ggrepel::geom_text_repel(aes(label=Special), size = 2)
# rain indicator ----------------------------------------------------------
plotly::ggplotly(rev_ts %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Rain_ind)) + geom_smooth(method="lm"))
# specials indicator ------------------------------------------------------
plotly::ggplotly(rev_ts_model %>% ggplot() +
aes(x = Earnings, y = Mean_TemperatureF, label = Special) +
geom_point(aes(color = Special_ind)) +
geom_smooth(method="lm"))
# log earnings -----------------------------------------------------------
rev_ts_model %>% ggplot() + aes(x = log(Earnings), y = Mean_TemperatureF) + geom_point() + geom_smooth()
# revenue when it rains? --------------------------------------------------
rev_ts %>%
group_by(Year,Rain_ind) %>%
summarise(Av_Rev = mean(Earnings, na.rm=T)
,min(Earnings,na.rm=T),max(Earnings,na.rm=T))
rev_ts %>%
filter(Year == 2016)
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, 20)) %>% glimpse
?cut
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = 5)) %>% glimpse
seq_along(from=10,to=100,by=5)
seq(from=10,to=100,by=5)
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>% glimpse
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)) %>%
filter(!is.na(Temp_bucket))
source("~/toClip.R")
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)) %>%
filter(!is.na(Temp_bucket)) %>% toClip
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=105,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)) %>%
filter(!is.na(Temp_bucket))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket)
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T), sum(Earnings==0))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T), sum(Earnings==0, na.rm=T))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>% filter(Temp_bucket=="(30,35]" )
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>% filter(Temp_bucket=="(30,35]" ) %>% View
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T), sum(!is.na(Earnings)))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket)) %>% toClip
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket)) %>%
gather(Var, Value, -Temp_bucket)
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(count=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(Total_days=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings)))
rev_ts %>%
filter(Year == 2016) %>%
mutate(Temp_bucket = cut(Mean_TemperatureF, breaks = seq(from=10,to=100,by=5))) %>%
group_by(Temp_bucket) %>%
summarise(Total_days=n(),Tot_Rev = sum(Earnings,na.rm=T),Av_Rev = mean(Earnings, na.rm = T)
,"Days Operating" = sum(!is.na(Earnings))) %>%
filter(!is.na(Temp_bucket))
