cor(f1_lm)
cor(rev_ts)
rev_ts
alias(f1_lm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+Max_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special+
Happy_Hour+
Special_ind)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
alias(f1_lm)
f1_glm <- glm(formula = f1, data = rev_ts)
summary(f1_glm)
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
glimpse(rev_ts)
rev_ts <- rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
)
## use this to generate formula statements:
# paste0(names(rev_ts), collapse = "+")
full_model <- as.formula(
Earnings~Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+
Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+
Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+
Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+
Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+
WindDirDegrees+Date+Day+Day_lab+Month+Year.y+Special+
Year+Happy_Hour+Special_ind)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special+
Happy_Hour+
Special_ind)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
alias(f1_lm)
f1_glm <- glm(formula = f1, data = rev_ts)
summary(f1_glm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees
#Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
rev_ts %>% filter(grepl("Nike",Special))
rev_ts %>% filter(!grepl("Nike",Special))
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
glimpse(rev_ts)
rev_ts <- rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
) %>%
filter(!grepl("Nike",Special))
## use this to generate formula statements:
# paste0(names(rev_ts), collapse = "+")
full_model <- as.formula(
Earnings~Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+
Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+
Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+
Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+
Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+
WindDirDegrees+Date+Day+Day_lab+Month+Year.y+Special+
Year+Happy_Hour+Special_ind)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts)
summary(f1_lm)
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
glimpse(rev_ts)
rev_ts <- rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
) %>%
mutate(Earnings_ntile = ntile(Earnings,20))
rev_ts %>% ggplot()+aes(x=Earnings_ntile)+geom_histogram()
rev_ts %>% ggplot()+aes(x=Earnings_ntile)+geom_col(stat="count")
rev_ts %>% group_by(Earnings_ntile) %>% summarise(count=n()) %>% ggplot()+aes(x=Earnings_ntile, y = count)+geom_col()
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
) %>%
mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% head
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
) %>%
mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% select(Earnings,Earings_ntile) %>% head
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)
) %>%
mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% select(Earnings,Earnings_ntile) %>% head
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0)
rev_ts
rev_ts_model
full_model <- as.formula(
Earnings~Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+
Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+
Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+
Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+
Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+
WindDirDegrees+Date+Day+Day_lab+Month+Year.y+Special+
Year+Happy_Hour+Special_ind)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees
#Special
#Happy_Hour+
#Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees
Special+
Happy_Hour+
Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0)
#mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% select(Earnings,Earnings_ntile) %>% head
## use this to generate formula statements:
# paste0(names(rev_ts), collapse = "+")
full_model <- as.formula(
Earnings~Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+
Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+
Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+
Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+
Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+
WindDirDegrees+Date+Day+Day_lab+Month+Year.y+Special+
Year+Happy_Hour+Special_ind)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees
Special+
Happy_Hour+
Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0)
#mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% select(Earnings,Earnings_ntile) %>% head
## use this to generate formula statements:
# paste0(names(rev_ts), collapse = "+")
full_model <- as.formula(
Earnings~Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+
Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+
Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+
Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+
Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+
WindDirDegrees+Date+Day+Day_lab+Month+Year.y+Special+
Year+Happy_Hour+Special_ind)
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special+
Happy_Hour+
Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
rev_ts_model$Mean_TemperatureF %>% hist
f2 <- as.formula(
Earnings~
Mean_TemperatureF+
Max_TemperatureF+
Min_TemperatureF+
PrecipitationIn+
CloudCover+
Rain_ind
)
f2 <- as.formula(
Earnings~
Mean_TemperatureF+
Max_TemperatureF+
Min_TemperatureF+
PrecipitationIn+
CloudCover+
Rain_ind
)
f2_lm <- lm(formula = f2
, data =rev_ts_model
)
summary(f2_lm)
f2_glm <- glm(formula = f2
, data =rev_ts_model
)
summary(f2_glm)
summary(f2_lm)
summary(f2_glm)
paste0(names(rev_ts), collapse = "+")
full_model
as.formula(Year.x+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+WindDirDegrees+Date+Earnings+Day+Day_lab+Month+Year.y+Special+Year)
as.formula(Earnings~+Max_TemperatureF+Mean_TemperatureF+Min_TemperatureF+Max_Dew_PointF+MeanDew_PointF+Min_DewpointF+Max_Humidity+Mean_Humidity+Min_Humidity+Max_Sea_Level_PressureIn+Mean_Sea_Level_PressureIn+Min_Sea_Level_PressureIn+Max_VisibilityMiles+Mean_VisibilityMiles+Min_VisibilityMiles+Max_Wind_SpeedMPH+Mean_Wind_SpeedMPH+Max_Gust_SpeedMPH+PrecipitationIn+CloudCover+Events+WindDirDegrees+Date+Earnings+Day+Day_lab+Month+Year.y+Special+Year)
paste0(names(rev_ts_model), collapse = "+")
as.formula(paste0(names(rev_ts_model), collapse = "+"))
as.formula(paste0("Earings~",names(rev_ts_model), collapse = "+"))
as.formula(c("Earnings~",paste0(names(rev_ts_model), collapse = "+"))
)
paste0(names(rev_ts_model), collapse = "+")
names(rev_ts_model)
names(rev_ts_model)[-"Earings"]
names(rev_ts_model)
names(rev_ts_model)["Earings"]
?tbl
?tbl_df
?tibble
# Modeling the data, looking for inferences e.g., how much rev is lost to rain?
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0)
#mutate(Earnings_ntile = ntile(Earnings,20)) %>% arrange(Earnings_ntile) %>% select(Earnings,Earnings_ntile) %>% head
# generate formula text  ------------------------------------------------------
## use this to generate formula text in the console:
# as.formula(c("Earnings~",paste0(names(rev_ts_model)["Earings"], collapse = "+")))
full_model <- as.formula(
Earnings ~ Year.x + Max_TemperatureF + Mean_TemperatureF + Min_TemperatureF +
Max_Dew_PointF + MeanDew_PointF + Min_DewpointF + Max_Humidity +
Mean_Humidity + Min_Humidity + Max_Sea_Level_PressureIn +
Mean_Sea_Level_PressureIn + Min_Sea_Level_PressureIn + Max_VisibilityMiles +
Mean_VisibilityMiles + Min_VisibilityMiles + Max_Wind_SpeedMPH +
Mean_Wind_SpeedMPH + Max_Gust_SpeedMPH + PrecipitationIn +
CloudCover + Events + WindDirDegrees + Date + Earnings +
Day + Day_lab + Month + Year.y + Special + Year + Happy_Hour +
Special_ind + Rain_ind
)
# trail 1. Full model  --------------------------------------------------------
f1 <- as.formula(
Earnings~ Mean_TemperatureF+
MeanDew_PointF+
Mean_Humidity+
Mean_Sea_Level_PressureIn+
Mean_VisibilityMiles+
Mean_Wind_SpeedMPH+
Max_Gust_SpeedMPH+
PrecipitationIn+
CloudCover+
Events+
WindDirDegrees+
Special+
Happy_Hour+
Special_ind
)
f1_lm <- lm(formula = f1, data = rev_ts_model)
summary(f1_lm)
alias(f1_lm)
f1_glm <- glm(formula = f1, data = rev_ts_model)
summary(f1_glm)
# trail 2. temp & precipitation -----------------------------------------------
f2 <- as.formula(
Earnings~
Mean_TemperatureF+
Max_TemperatureF+
Min_TemperatureF+
PrecipitationIn+
CloudCover+
Rain_ind
)
f2_lm <- lm(formula = f2
, data =rev_ts_model
)
summary(f2_lm)
rm(list=ls())
library(tidyverse)
rev_ts <- readRDS("weather-revenue-data-v002.rds")
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0)
as.formula(c("Earnings~",paste0(names(rev_ts_model)["Earings"], collapse = "+")))
names(rev_ts_model)["Earings"]
names(rev_ts_model)
names(rev_ts_model)["Earnings"]
names(rev_ts_model)
names(rev_ts_model)=="Earnings"
as.formula(c("Earnings~",paste0(names(rev_ts_model)[names(rev_ts_model)=="Earnings"], collapse = "+")))
as.formula(c("Earnings~",paste0(names(rev_ts_model)[names(rev_ts_model)!="Earnings"], collapse = "+")))
as.formula(c("Earnings~",paste0(names(rev_ts_model)[names(rev_ts_model)!="Earnings"], collapse = "+")))
rev_ts %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point()
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point()
rev_ts_model
rev_ts_model <-
rev_ts %>% mutate(Happy_Hour = grepl("Happy Hour",Special)
,Special_ind = ifelse(is.na(Special),FALSE,TRUE)
,Rain_ind = grepl("Rain",Events)
,Events = factor(Events)) %>%
filter(Earnings>0) %>%
filter(!is.na(Earnings))
rev_ts_model
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point()
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth()
library(ggrepel)
rev_ts_model
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(label=Special)
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(aes(label=Special))
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(aes(label=Special), size = 1)
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(aes(label=Special), size = 1.5)
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(aes(label=Special), size = 2)
library(plotly)
install.packages(plotly)
install.packages('plotly')
library(plotly)
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth() + ggrepel::geom_text_repel(aes(label=Special), size = 2) %>% plotly::ggplotly()
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth()  %>% plotly::ggplotly()
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth()  + plotly::ggplotly()
plotly::ggplotly(
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF) + geom_point() + geom_smooth()
)
plotly::ggplotly(
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point() + geom_smooth()
)
plotly::ggplotly(rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point() + geom_smooth(method="lm"))
devtools::install_github('hadley/ggplot2')
plotly::ggplotly(rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point() + geom_smooth(method="lm"))
rev_ts_model
plotly::ggplotly(rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point(aes(color=Rain_ind)) + geom_smooth(method="lm"))
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point(aes(color=Rain_ind)) + geom_smooth(method="lm")
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point(aes(color=Rain_ind)) + geom_smooth(method="lm")
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point(aes(color=Rain_ind))
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special, color = Rain_ind) + geom_point() + geom_smooth(method="lm")
rev_ts_model %>% ggplot() + aes(x = Earnings, y = Mean_TemperatureF, label = Special) + geom_point() + geom_smooth(method="lm")
